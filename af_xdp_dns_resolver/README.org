#+TITLE: Setup dependencies
#+OPTIONS: ^:nil

* Dependencies

The main dependencies are =libxdp=, =libbpf=, =llvm=, =clang= and
=libelf=. LLVM+clang compiles our restricted-C programs into BPF-byte-code,
which is stored in an ELF object file (=libelf=), that is loaded by =libbpf=
into the kernel via the =bpf= syscall. XDP programs are managed by =libxdp=
which implements the XDP multi-dispatch protocol. Some of the lessons also
use the =perf= utility to track the kernel behaviour through tracepoints.

The Makefiles in this repo will try to detect if you are missing some
dependencies, and give you some pointers.

** Packages on Fedora

On a machine running the Fedora Linux distribution, install the packages:

#+begin_src sh
sudo dnf install clang llvm
sudo dnf install elfutils-libelf-devel libpcap-devel perf glibc-devel.i686
#+end_src

Note also that Fedora by default sets a limit on the amount of locked memory
the kernel will allow, which can interfere with loading BPF maps. The
=testenv.sh= script will adjust this for you, but if you're not using that
you will probably run into problems. Use this command to raise the limit:

#+begin_src sh
  # ulimit -l 1024
#+end_src

Note that you need to do this in the shell you are using to load programs
(in particular, it won't work with =sudo=).

** Packages on Debian/Ubuntu

On Debian and Ubuntu installations, install the dependencies like this:

#+begin_src sh
sudo apt install clang llvm libelf-dev libpcap-dev build-essential libc6-dev-i386 m4
#+end_src

To install the 'perf' utility, run this on Debian:
#+begin_src sh
sudo apt install linux-perf
#+end_src

or this on Ubuntu:

#+begin_src sh
sudo apt install linux-tools-$(uname -r)
#+end_src

** Packages on openSUSE

On a machine running the openSUSE distribution, install the packages:

#+begin_src sh
sudo zypper install clang llvm libelf-devel libpcap-devel perf linux-glibc-devel
#+end_src

* Kernel headers dependency

The Linux kernel provides a number of header files, which are usually installed
in =/usr/include/linux=. The different Linux distributions usually provide a
software package with these headers.

Some of the header files (we depend on) are located in the kernel tree under
include/uapi/linux/ (e.g. include/uapi/linux/bpf.h), but you should not include
those files as they go through a conversion process when exported/installed into
distros' =/usr/include/linux= directory. In the kernel git tree you can run the
command: =make headers_install= which will create a lot of headers files in
directory "usr/".

For now, this tutorial depends on kernel headers package provided by your
distro. We may choose to shadow some of these later.

** Packages on Fedora

On a machine running the Fedora Linux distribution, install the package:
#+begin_src sh
sudo dnf install kernel-headers
#+end_src

** Packages on Debian/Ubuntu

On Debian and Ubuntu installations, install the headers like this

#+begin_src sh
sudo apt install linux-headers-$(uname -r)
#+end_src

** Packages on openSUSE

On a machine running the openSUSE distribution, install the package:

#+begin_src sh
sudo zypper install kernel-devel
#+end_src


* Extra tools

The =bpftool= is the recommended tool for inspecting BPF programs running on
your system. It also offers simple manipulation of eBPF programs and maps.
The =bpftool= is part of the Linux kernel tree under [[https://github.com/torvalds/linux/tree/master/tools/bpf/bpftool][tools/bpf/bpftool/]], but
some Linux distributions also ship the tool as a software package.

If you are planning on working through the packet processing examples you
should also install tcpdump.

** Packages on Fedora

On a machine running the Fedora Linux distribution, install package:

#+begin_src sh
sudo dnf install bpftool
sudo dnf install tcpdump
#+end_src

** Packages on Ubuntu

Starting from Ubuntu 19.10, bpftool can be installed with:

#+begin_src sh
sudo apt install linux-tools-common linux-tools-generic
sudo apt install tcpdump
#+end_src

(Ubuntu 18.04 LTS also has it, but it is an old and quite limited bpftool
version.)

** Packages on Debian

Starting from Debian Bullseye, bpftool can be installed with:

#+begin_src sh
sudo apt install bpftool
sudo apt install tcpdump
#+end_src

(If you are on Debian Buster, you can get it from [[https://backports.debian.org][buster-backports]].)

** Packages on openSUSE

On a machine running the openSUSE Tumbleweed distribution, install package:

#+begin_src sh
sudo zypper install bpftool
sudo zypper install tcpdump
#+end_src


* Generate the necessary files

Once you have installed the dependencies you need genereate the necessary files to follow the exercises.

Start by running ./configure from the root of the repository to make sure every dependency is installed.

#+begin_src sh
./configure
#+end_src

If there is a missing dependency it should output some error, if not we can continue.

Now run make to generate all the necessary files:

(This is for Ubuntu distributions, use equivalent commands for other distributions.)
#+begin_src sh
sudo apt install libjansson-dev
#+end_src

#+begin_src sh
make clean
make
#+end_src

Now, navigate to the src directory and run:

#+begin_src sh
make clean
make
#+end_src


* Running the DNS Filter with AF_XDP

This setup involves using a virtual environment to run a DNS filter program with AF_XDP and run DNS queries.

** Host Setup (IP: inet6 `fc00:dead:cafe:1::1`, inet `10.11.1.1`)

1. Build the project:
   #+begin_src sh
   make
   #+end_src

2. Initialize the test environment aliases on host:
   #+begin_src sh
   eval $(../testenv/testenv.sh alias)
   #+end_src

3. Setup the `veth` interface:
   #+begin_src sh
   t setup --name veth # for IPv6
   t setup --name veth --legacy-ip # for IPv4
   #+end_src

4. Run the AF_XDP program on veth interface:
   #+begin_src sh
   sudo ./af_xdp_user -d veth --filename dns_filter_kern.o --progname xdp_dns_filter_func 
   #+end_src

** Virtual Host Setup (on another terminal) (IP: inet6 `fc00:dead:cafe:1::2`, inet `10.11.1.2`)

1. Initialize test environment alias for Virtual Host:
   #+begin_src sh
   eval $(../testenv/testenv.sh alias)
   #+end_src

2. Enter the Virtual Host environment:
   #+begin_src sh
   t enter
   #+end_src

3. Check environment status:
   #+begin_src sh
   t status
   t ping
   #+end_src

** DNS Query Testing

1. For capturing traffic on `veth0` Virtual Host:
   #+begin_src sh
   sudo tcpdump -i veth0 -w cap.pcap 
   #+end_src

2. Replay traffic captured in pcap file on `veth0` Virtual Host:
   #+begin_src sh
   tcpreplay --intf1 veth0 cap.pcap
   #+end_src

3. Run DNS performance tests:
   #+begin_src sh
   dnsperf -s fc00:dead:cafe:1::1 -d queries.txt # for IPv6 setup
   dnsperf -s 10.11.1.1 -d queries.txt # for IPv4 setup
   #+end_src

4. Send manual DNS queries using `dig` from `veth0` Virtual Host:
   #+begin_src sh
   dig @fc00:dead:cafe:1::1 www.iitgn.ac.in # for IPv6 setup
   dig @10.11.1.1 www.iitgn.ac.in # for IPv4 setup
   #+end_src
